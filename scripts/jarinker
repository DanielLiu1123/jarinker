#!/bin/bash

# Jarinker Remote Execution Script
# Usage: curl https://raw.githubusercontent.com/DanielLiu1123/jarinker/main/scripts/jarinker | bash -s -- [jarinker-args]

set -euo pipefail

# Global configuration
readonly GITHUB_REPO="DanielLiu1123/jarinker"
readonly REQUIRED_JAVA_VERSION=17
readonly DEFAULT_CACHE_DIR="$HOME/.jarinker"

# User configurable variables
JARINKER_CACHE_DIR="${JARINKER_CACHE_DIR:-$DEFAULT_CACHE_DIR}"
JARINKER_VERSION="${JARINKER_VERSION:-v0.0.1}"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

# Remove a cached jarinker version
uninstall_jarinker() {
    local provided_version="$1"
    local version
    if [[ -n "$provided_version" ]]; then
        version="$provided_version"
    else
        version="$JARINKER_VERSION"
        log_info "No version specified; defaulting to $version"
    fi

    if [[ -z "$version" ]]; then
        log_error "Unable to determine version to uninstall"
        exit 1
    fi

    local cache_dir="$JARINKER_CACHE_DIR/versions/$version"

    if [[ ! -d "$cache_dir" ]]; then
        log_warn "No jarinker version found at $cache_dir"
        return
    fi

    log_info "Removing cached jarinker $version..."

    rm -rf "$cache_dir"

    if [[ -d "$cache_dir" ]]; then
        log_error "Failed to remove $cache_dir"
        exit 1
    fi

    log_success "Removed jarinker $version"
}

# Check if required dependencies are available
check_dependencies() {
    log_info "Checking Java version..."
    
    # Check Java
    if ! command -v java &> /dev/null; then
        log_error "Java not found. Please install Java $REQUIRED_JAVA_VERSION or later."
        exit 1
    fi
    
    # Check Java version
    local java_version
    java_version=$(java -version 2>&1 | awk -F'"' '/version/ {print $2}' | head -n1)

    local java_major_version
    if [[ "$java_version" == 1.* ]]; then
        java_major_version=$(echo "$java_version" | cut -d'.' -f2)
    else
        java_major_version=$(echo "$java_version" | cut -d'.' -f1)
    fi

    if [[ -z "$java_major_version" || ! "$java_major_version" =~ ^[0-9]+$ ]]; then
        log_error "Unable to determine Java version (found: $java_version)"
        exit 1
    fi

    if (( java_major_version < REQUIRED_JAVA_VERSION )); then
        log_error "Java $REQUIRED_JAVA_VERSION or later is required. Found Java $java_major_version."
        exit 1
    fi

    log_success "Java $java_major_version found"
}

# Download and extract jarinker
download_jarinker() {
    local version="$1"
    local download_url="$2"
    local cache_dir="$JARINKER_CACHE_DIR/versions/$version"
    local zip_file="$cache_dir/jarinker-cli-$version.zip"

    log_info "Downloading jarinker $version..."
    
    # Create cache directory
    mkdir -p "$cache_dir"

    curl -L "$download_url" -o "$zip_file"

    if [[ ! -f "$zip_file" ]]; then
        log_error "Download failed: $zip_file not found"
        exit 1
    fi

    log_success "Downloaded jarinker $version to $zip_file"
    
    log_info "Extracting jarinker..."
    
    # Extract to cache directory
    if ! unzip -q "$zip_file" -d "$cache_dir"; then
        log_error "Failed to extract $zip_file"
        rm -f "$zip_file"
        exit 1
    fi
    
    # Find the jarinker executable
    local jarinker_bin
    jarinker_bin=$(find "$cache_dir" -name "jarinker" -type f | head -n1)
    
    if [[ -z "$jarinker_bin" ]]; then
        log_error "jarinker executable not found in extracted files"
        exit 1
    fi
    
    log_success "jarinker $version extracted to $cache_dir"

    echo "$jarinker_bin"
}

# Get or download jarinker
ensure_jarinker_available() {
    local version="$1"
    local cache_dir="$JARINKER_CACHE_DIR/versions/$version"
    
    # Look for existing installation
    local jarinker_bin
    jarinker_bin=$(find "$cache_dir" -name "jarinker" -type f 2>/dev/null | head -n1)
    
    if [[ -n "$jarinker_bin" && -x "$jarinker_bin" ]]; then
        log_success "Using cached jarinker $version"
        echo "$jarinker_bin"
        return
    fi
    
    # Download jarinker
    local download_url
    download_url="https://github.com/$GITHUB_REPO/releases/download/$version/jarinker-cli-$version.zip"
    download_jarinker "$version" "$download_url"
}

# Execute jarinker with provided arguments
execute_jarinker() {
    local jarinker_bin="$1"
    shift
    
    log_info "Executing: $jarinker_bin $*"
    
    # Execute jarinker with all provided arguments
    exec "$jarinker_bin" "$@"
}

# Main function
main() {
    # Check dependencies first
    if [[ $# -ge 1 && "$1" == "uninstall" ]]; then
        shift
        local uninstall_version_arg="${1:-}"
        uninstall_jarinker "$uninstall_version_arg"
        exit 0
    fi

    check_dependencies

    # Determine version to use
    local version="$JARINKER_VERSION"

    # Always ensure jarinker is available first
    local jarinker_bin
    jarinker_bin=$(ensure_jarinker_available "$version")

    # Execute jarinker with remaining arguments
    execute_jarinker "$jarinker_bin" "$@"
}

main "$@"

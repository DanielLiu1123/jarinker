#!/bin/bash

# Jarinker Remote Execution Script
# This script automatically downloads and executes jarinker without requiring manual installation
# Usage: curl -sSL https://raw.githubusercontent.com/DanielLiu1123/jarinker/main/scripts/jarinker | bash -s -- [jarinker-args]

set -euo pipefail

# Global configuration
readonly SCRIPT_NAME="jarinker"
readonly GITHUB_REPO="DanielLiu1123/jarinker"
readonly REQUIRED_JAVA_VERSION=17
readonly DEFAULT_CACHE_DIR="$HOME/.jarinker"

# User configurable variables
JARINKER_CACHE_DIR="${JARINKER_CACHE_DIR:-$DEFAULT_CACHE_DIR}"
JARINKER_VERSION="${JARINKER_VERSION:-v0.0.1}"
JARINKER_OFFLINE="${JARINKER_OFFLINE:-false}"
JARINKER_VERBOSE="${JARINKER_VERBOSE:-false}"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

# Show help information
show_help() {
    cat << 'EOF'
Jarinker Remote Execution Script

USAGE:
    # Install to PATH (recommended)
    curl -sSL https://raw.githubusercontent.com/DanielLiu1123/jarinker/main/scripts/jarinker | bash

    # Then use directly
    jarinker analyze -cp libs/ build/classes/java/main

    # Or execute directly with arguments
    curl -sSL https://raw.githubusercontent.com/DanielLiu1123/jarinker/main/scripts/jarinker | bash -s -- analyze -cp libs/ build/

    # Or download and use
    curl -sSL https://raw.githubusercontent.com/DanielLiu1123/jarinker/main/scripts/jarinker -o jarinker && chmod +x jarinker
    ./jarinker analyze -cp libs/ build/

ENVIRONMENT VARIABLES:
    JARINKER_VERSION     Specify jarinker version (default: latest)
    JARINKER_CACHE_DIR   Cache directory (default: ~/.jarinker)
    JARINKER_OFFLINE     Use offline mode, only use cached versions (default: false)
    JARINKER_VERBOSE     Enable verbose output (default: false)

SCRIPT OPTIONS:
    --script-help        Show this help message
    --script-version     Show script version
    --script-clean       Clean cache directory
    --script-update      Force update to latest version
    --script-install     Install jarinker to PATH

EXAMPLES:
    # Install to PATH
    curl -sSL https://raw.githubusercontent.com/DanielLiu1123/jarinker/main/scripts/jarinker | bash

    # Use after installation
    jarinker analyze -cp libs/ build/classes/java/main
    jarinker shrink -cp libs/ -o shrunk-libs/ build/classes/java/main

    # Direct execution
    ./jarinker analyze -cp libs/ build/classes/java/main

    # Use specific version
    JARINKER_VERSION=0.1.0-RC1 ./jarinker analyze -cp libs/ build/

    # Verbose mode
    JARINKER_VERBOSE=true ./jarinker --help

For jarinker-specific help, run: jarinker --help (after installation)
EOF
}

# Check if required dependencies are available
check_dependencies() {
    log_info "Checking Java version..."
    
    # Check Java
    if ! command -v java &> /dev/null; then
        log_error "Java not found. Please install Java $REQUIRED_JAVA_VERSION or later."
        exit 1
    fi
    
    # Check Java version
    local java_version
    java_version=$(java -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f1)
    if [[ "$java_version" -lt "$REQUIRED_JAVA_VERSION" ]]; then
        log_error "Java $REQUIRED_JAVA_VERSION or later is required. Found Java $java_version."
        exit 1
    fi
    
    log_success "Java $java_version found"
}

# Download and extract jarinker
download_jarinker() {
    local version="$1"
    local download_url="$2"
    local cache_dir="$JARINKER_CACHE_DIR/versions/$version"
    local zip_file="$cache_dir/jarinker-cli-$version.zip"

    log_info "Downloading jarinker $version..."
    
    # Create cache directory
    mkdir -p "$cache_dir"

    curl -L "$download_url" -o "$zip_file"

    if [[ ! -f "$zip_file" ]]; then
        log_error "Download failed: $zip_file not found"
        exit 1
    fi

    log_success "Downloaded jarinker $version to $zip_file"
    
    log_info "Extracting jarinker..."
    
    # Extract to cache directory
    if ! unzip -q "$zip_file" -d "$cache_dir"; then
        log_error "Failed to extract $zip_file"
        rm -f "$zip_file"
        exit 1
    fi
    
    # Find the jarinker executable
    local jarinker_bin
    jarinker_bin=$(find "$cache_dir" -name "jarinker" -type f | head -n1)
    
    if [[ -z "$jarinker_bin" ]]; then
        log_error "jarinker executable not found in extracted files"
        exit 1
    fi
    
    log_success "jarinker $version extracted to $cache_dir"

    echo "$jarinker_bin"
}

# Get or download jarinker
ensure_jarinker_available() {
    local version="$1"
    local cache_dir="$JARINKER_CACHE_DIR/versions/$version"
    
    # Look for existing installation
    local jarinker_bin
    jarinker_bin=$(find "$cache_dir" -name "jarinker" -type f 2>/dev/null | head -n1)
    
    if [[ -n "$jarinker_bin" && -x "$jarinker_bin" ]]; then
        log_success "Using cached jarinker $version"
        echo "$jarinker_bin"
        return
    fi
    
    # Download jarinker
    local download_url
    download_url="https://github.com/$GITHUB_REPO/releases/download/$version/jarinker-cli-$version.zip"
    download_jarinker "$version" "$download_url"
}

# Execute jarinker with provided arguments
execute_jarinker() {
    local jarinker_bin="$1"
    shift
    
    log_info "Executing: $jarinker_bin $*"
    
    # Execute jarinker with all provided arguments
    exec "$jarinker_bin" "$@"
}

# Clean cache directory
clean_cache() {
    if [[ -d "$JARINKER_CACHE_DIR" ]]; then
        log_info "Cleaning cache directory: $JARINKER_CACHE_DIR"
        rm -rf "$JARINKER_CACHE_DIR"
        log_success "Cache cleaned"
    else
        log_info "Cache directory does not exist: $JARINKER_CACHE_DIR"
    fi
}

# Main function
main() {
    # Check dependencies first
    check_dependencies

    # Determine version to use
    local version="$JARINKER_VERSION"

    # Always ensure jarinker is available first
    local jarinker_bin
    jarinker_bin=$(ensure_jarinker_available "$version")

    # Execute jarinker with remaining arguments
    execute_jarinker "$jarinker_bin" "$@"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

plugins {
    id "com.diffplug.spotless" version "${spotlessVersion}" apply false
    id "com.github.spotbugs" version "${spotbugsVersion}" apply false
    id "com.gradleup.shadow" version "${shadowPluginVersion}" apply false
    id "org.graalvm.buildtools.native" version "${graalvmBuildToolsVersion}" apply false
}

allprojects {

    apply plugin: "java"
    apply plugin: "java-library"

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        testImplementation("org.springframework.boot:spring-boot-starter-test:3.3.4") {
            exclude(group: "org.springframework")
            exclude(group: "org.springframework.boot")
        }
    }

    test {
        useJUnitPlatform()
    }

    apply plugin: "com.diffplug.spotless"
    spotless {
        encoding "UTF-8"
        java {
            toggleOffOn()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
            palantirJavaFormat()

            targetExclude("build/generated/**")

            custom("Refuse wildcard imports", {
                if (it =~ /\nimport .*\*;/) {
                    throw new IllegalStateException("Do not use wildcard imports, 'spotlessApply' cannot resolve this issue, please fix it manually.")
                }
            } as Closure<String>)
        }
    }

    apply plugin: "com.github.spotbugs"
    spotbugs {
        spotbugsTest.enabled = false
        omitVisitors.addAll("FindReturnRef", "DontReusePublicIdentifiers")
    }
}
